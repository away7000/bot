# Bot Sniper Otomatis Berdasarkan Deployer
# Fitur: Deteksi token baru dari deployer + beli otomatis via Uniswap v2 Router di jaringan BASE

from web3 import Web3
import json, time

# === KONFIGURASI ===
RPC_URL = "https://mainnet.base.org"
PRIVATE_KEY = "0xYOUR_PRIVATE_KEY"
WALLET_ADDRESS = "0xYOUR_WALLET_ADDRESS"
ROUTER_ADDRESS = "0x327Df1E6de05895d2ab08513aaDD9313Fe505d86"  # Uniswap V2 Router BASE
WETH_ADDRESS = "0x4200000000000000000000000000000000000006"  # WETH di BASE
DEPLOYER_ADDRESS = "0xDEPLOYER_WALLET_OR_CONTRACT"

# === SETUP WEB3 ===
w3 = Web3(Web3.HTTPProvider(RPC_URL))
wallet = Web3.to_checksum_address(WALLET_ADDRESS)
router = Web3.to_checksum_address(ROUTER_ADDRESS)

def load_router_abi():
    with open("uniswapv2_router_abi.json") as f:
        return json.load(f)

router_contract = w3.eth.contract(address=router, abi=load_router_abi())

# === BELI TOKEN ===
def buy_token(token_address, eth_amount):
    try:
        token = Web3.to_checksum_address(token_address)
        amount_in_wei = w3.to_wei(eth_amount, 'ether')
        deadline = int(time.time()) + 120
        path = [WETH_ADDRESS, token]

        txn = router_contract.functions.swapExactETHForTokens(
            0, path, wallet, deadline
        ).build_transaction({
            'from': wallet,
            'value': amount_in_wei,
            'gas': 300000,
            'gasPrice': w3.to_wei('5', 'gwei'),
            'nonce': w3.eth.get_transaction_count(wallet),
        })

        signed_txn = w3.eth.account.sign_transaction(txn, private_key=PRIVATE_KEY)
        tx_hash = w3.eth.send_raw_transaction(signed_txn.rawTransaction)
        print(f"[BUY] Transaksi terkirim! TX Hash: {tx_hash.hex()}")
    except Exception as e:
        print(f"[ERROR] Gagal beli token: {str(e)}")

# === MONITOR DEPLOYER ===
def monitor_deployer():
    print(f"[Monitor] Memantau deployer: {DEPLOYER_ADDRESS}")
    last_block = w3.eth.block_number
    while True:
        try:
            block = w3.eth.get_block('latest', full_transactions=True)
            for tx in block.transactions:
                if tx['from'].lower() == DEPLOYER_ADDRESS.lower() and tx['to'] is None:
                    receipt = w3.eth.get_transaction_receipt(tx['hash'])
                    new_contract = receipt.contractAddress
                    print(f"[DETECTED] Kontrak baru: {new_contract}")

                    # Validasi cepat apakah kontrak ini token ERC20
                    try:
                        token_contract = w3.eth.contract(address=new_contract, abi=[
                            {"constant": True, "inputs": [], "name": "symbol", "outputs": [{"name": "", "type": "string"}], "type": "function"},
                            {"constant": True, "inputs": [], "name": "decimals", "outputs": [{"name": "", "type": "uint8"}], "type": "function"}
                        ])
                        symbol = token_contract.functions.symbol().call()
                        decimals = token_contract.functions.decimals().call()
                        print(f"[TOKEN] Valid ERC20: {symbol} ({decimals} decimals)")

                        # Beli token otomatis
                        buy_token(new_contract, 0.03)  # Ganti nominal sesuai kebutuhan
                    except Exception as e:
                        print(f"[SKIP] Kontrak bukan token valid: {str(e)}")
            time.sleep(5)
        except Exception as err:
            print(f"[ERROR] Loop error: {str(err)}")
            time.sleep(10)

# === JALANKAN ===
if __name__ == "__main__":
    monitor_deployer()
