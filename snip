from web3 import Web3
import json, time

# === KONFIGURASI ===
RPC_URL = "https://mainnet.base.org"  # Ganti sesuai jaringan Virtuals
PRIVATE_KEY = "0xYOUR_PRIVATE_KEY"
WALLET_ADDRESS = "0x6ecec4F1e82f47d48d19d9728A3B7bf1DB9c803E"
DEPLOYER_ADDRESS = "0x42f4f5a3389ca0bed694de339f4d432acddb1ea9"
SMART_CONTRACT_ADDRESS = "0x9512bc0fa4117c619d85641850ba4260cff24cf8"
ROUTER_ADDRESS = "0x6131B5fae19EA4f9D964eAc0408E4408b66337b5"  # UniswapV2 Router

ETH_AMOUNT = 0.3  # ETH yang dipakai beli token
SLIPPAGE = 15    # dummy minimum token out (update sesuai logika kamu)

# === SETUP WEB3 ===
w3 = Web3(Web3.HTTPProvider(RPC_URL))
wallet = Web3.to_checksum_address(WALLET_ADDRESS)
contract_address = Web3.to_checksum_address(SMART_CONTRACT_ADDRESS)

# === LOAD ABI SMART CONTRACT KAMU (BuyPairBot) ===
with open("buy_pair_bot_abi.json") as f:
    sniper_abi = json.load(f)

sniper_contract = w3.eth.contract(address=contract_address, abi=sniper_abi)

def call_buy_token(token_address):
    deadline = int(time.time()) + 300
    token = Web3.to_checksum_address(token_address)

    txn = sniper_contract.functions.buyToken(
        token,
        int(SLIPPAGE),  # Dummy minOut
        deadline
    ).build_transaction({
        'from': wallet,
        'value': w3.to_wei(ETH_AMOUNT, 'ether'),
        'gas': 300000,
        'gasPrice': w3.to_wei('5', 'gwei'),
        'nonce': w3.eth.get_transaction_count(wallet),
    })

    signed_txn = w3.eth.account.sign_transaction(txn, private_key=PRIVATE_KEY)
    tx_hash = w3.eth.send_raw_transaction(signed_txn.rawTransaction)
    print(f"[BUY] TX Hash: {tx_hash.hex()}")


# === MONITOR ===
def monitor_deployer():
    print(f"[Monitor] Watching deployer {DEPLOYER_ADDRESS}...")
    while True:
        try:
            block = w3.eth.get_block('latest', full_transactions=True)
            for tx in block.transactions:
                if tx['from'].lower() == DEPLOYER_ADDRESS.lower() and tx['to'] is None:
                    receipt = w3.eth.get_transaction_receipt(tx['hash'])
                    if receipt.contractAddress:
                        token = receipt.contractAddress
                        print(f"[DETECT] Token Baru: {token}")
                        call_buy_token(token)
            time.sleep(4)
        except Exception as e:
            print(f"[ERROR] {str(e)}")
            time.sleep(10)

if __name__ == "__main__":
    monitor_deployer()

